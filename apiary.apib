FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# MallPay Insurance Application API

## About

This API description is a work in progress. API is not stabilized yet and may change without notice.

## General Info

Here comes the general info about this RESTfull API.
The API is versioned - the purpose is to enable API development without breaking older versions in use. The version is part of the endpoint URL (ie `/v1/`).

### What's the purpose of this API

This API allows partners to retrieve info about services available for eligible products and operations required to set-up such services for their customers.

### General workflow

1. Log in.
2. Request services available for products specified.
3. Create a contract based on above offer of services.
4. Provide required information for the contract.
5. Activate the contract.
6. Cancel the contract.
7. Contract status information.

## API Endpoints Description

### Authorize

Enables the partner to log in. It is required to use all the other endpoints.

### Request Services

Lets the partner to request available services for products. In order to do so, the partner has to provide information about products they require services for. Endpoint response contains services (and their possible combinations) for the provided products.

### Create Contract

Based on an offer received from Request Services endpoint and their customer choices, enables a partner to create a contract for the services selected. If it was successfully created, response contains information about the created contract, errors explaining what went wrong otherwise.

### Update Contract

Allows a partner to update a previously created non-activated? contract. This may be needed to fill-in certain allowed, previously unknown data at the time of product packaging or shipping - product serial number, for example. Only some parts of the contract may be updated this way.
In case of success, response contains updated contract, errors otherwise.

### Activate Contract

In order for us to be able to fulfill any contract, the contract has to be activated first. This typically happens at the time of product shipping or delivery, depending on partner circumstances.

**NOTE:** Activate Contract also sends contract activation information to customers e-mail address.

### Cancel Contract

Subject to general terms and conditions, a contract can also be canceled. Response contains info if the contract was successfully canceled. If it was not, response contains information why it was not canceled.

**NOTE:** Cancel Contract also sends contract cancellation information message to customers e-mail address.

### Contract Status

Provides information about created contracts and their status. 



## Authorize [/v1/partner/authorize]

### Request Authorization [POST]
Log in to be able to use other endpoints.

+ Request (application/json; charset=utf-8)
    + Attributes (AuthorizationRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (AuthorizationResponse)


## Request Services [/v1/services]

### Request Available Services [GET]
Get info on services available for sent products.

+ Request (application/json; charset=utf-8)
    + Attributes (RequestServicesRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (RequestServicesResponse)


## Create Contract [/v1/contracts]

### Create Contract [POST]
Create a contract based on available services offering.

+ Request (application/json; charset=utf-8)
    + Attributes (ContractCreateRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractCreateResponse)


## Contract Operations [/v1/contracts/{contract_id}]

### Contract Status [GET]
Get status of selected Contract.

+ Request (application/json; charset=utf-8)
    + Attributes (ContractStatusRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractStatusResponse)

### Update Contract [PUT]
Update selected contract.

+ Request (application/json; charset=utf-8)
    + Attributes (ContractUpdateRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractUpdateResponse)


## Activate Contract [/v1/contracts/{contract_id}/activate]

### Activate Contract [POST]
Activate selected contract.

+ Request (application/json; charset=utf-8)
    + Attributes (ContractActivateRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractActivateResponse)


## Cancel Contract [/v1/contracts/{contract_id}/cancel]

### Cancel Contract [POST]
Cancel selected contract.

+ Request (application/json; charset=utf-8)
    + Attributes (ContractCancelRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractCancelResponse)



# Data Structures

## AuthorizationRequest (object)
### Properties
+ `username`: `eShopUsername` (string, required) - Partner username
+ `password`: `eShopPassword` (string, required) - Partner password


## AuthorizationResponse (object)
### Properties
+ `accessToken`: `secretaccessToken` (string, required) - Secret access token
+ `expiresIn`: 7200 (number, required) - Remaining token validity time (in seconds)



## RequestServicesRequest (object)
Customer consent for processing of personal data according to GDPR. `slug` uniquely defines scope of the consent and purpose of processing, `businessDate` is the datetime customer agreed to the processing of this particular piece of personal data for the purpose defined by `slug`.

### Properties
+ `items`: (array[ServiceRequestProduct], required) - Array of products you want to receive possible services for.

## RequestServicesResponse (object)
### Properties
+ `offersId`: 'UUID-comes-here' (string, required) - Id of the offers
+ `offers`: (array[ServiceResponseGroup], required)



## ContractCreateRequest (object)
Customer consent for processing of personal data according to GDPR. `slug` uniquely defines scope of the consent and purpose of processing, `businessDate` is the datetime customer agreed to the processing of this particular piece of personal data for the purpose defined by `slug`.

### Properties
+ `Property5`: (string)

## ContractCreateResponse (object)

### Properties
+ `Property6`: (string)



## ContractStatusRequest (object)


### Properties
+ `Property7`: (string)

## ContractStatusResponse (object)

### Properties
+ `Property8`: (string)



## ContractUpdateRequest (object)
Update selected `Contract`. Only allows updating certain contract properties. in case you need to update other properties, which this method does not allow to change, you should request a new services offert and create a new contract.

### Properties
+ `Property9`: (string)

## ContractUpdateResponse (object)

### Properties
+ `Property10`: (string)


## ContractActivateRequest (object)
The contract has to be activated for us to be able to fullfill it.

### Properties
+ `Property11`: (string)

## ContractActivateResponse (object)

### Properties
+ `Property12`: (string)



## ContractCancelRequest (object)
A running `contract` can also be canceled under certain conditions (ie. in 14 days after goods delivery to customer).

### Properties
+ `Property13`: (string)

## ContractCancelResponse (object)

### Properties
+ `Property14`: (string)



## PriceAmount (object)
### Properties
+ `priceIncVat`: 750000 (number) - Price including two decimal numbers (750000 = 7500,-).
+ `currency`: CZK (string, required) - Currenecy is required in absolute value prices.


## AdditionalInfo (object)
<?-- Stylovému info bych se v API raději vyhnul -->
### Properties
+ `styleInfo`: style info (string, optional, nullable)


## ServiceRequestProduct (object)
### Properties
+ `productName`: Nikon F (string, optional, nullable) - Product name
+ One Of
    + `productEan`: 1123456789123 (number, optional, nullable) - GTIN (EAN13), 13 or 14 digits length
    + `productCode`: NIKON-F-BLACK-1964 (string, optional, nullable) - Is this required at all?
+ One Of
 <!-- We have to decide here if we want textual or code-based categories. Which one is more advanageous? -->
    + `productCategoryText`: Camera, Still Picture, Analog, 35mm (string, required) -<?-- Do we require textual category or category code?-->
    + `productCategoryCode`: 1944 (number, required)  -<?-- Do we require textual category or category code? -->
+ `productQuantity`: 2 (number, required)
+ `productPricePerPiece`: (PriceAmount, required) -<?-- Price (and not from-to price) is required, since price interval may lead to getting either lower or higher service and service computation may depend on it. -->
+ `productCondition`: (enum, required)
    + `new` - new product
    + `used` - used product
    + `unpacked` - like new product, possibly returned by customer in 14 day period after purchase
    + `other`


## ServiceResponseItem (object)
### Properties
+ `serviceName`: `ADP (Accidental Damage Protection) Insurance` (string, required)
+ `serviceDescription`: `Description of the service, may be quite long` (string, optional, nullable) - Description of a service offering item in the group.
+ `servicePriority`: 1 (number, optional, nullable) - Offer ordering information, lower number means higher priority.
+ `servicePriceType`: (enum, required) - Type of offer price
    + `absolute` -  Price of offer is absolute
    + `percent` - Price of offer is constructed as a fraction of `Price` of product this service is covering.
+ `servicePrice`: 1250 (PriceAmount, required) - Price of this particular service offer
+ `serviceAdditionalInfo`: (array[AdditionalInfo], optional, nullable) - Additional info for the item


## ServiceResponseGroup (object)
### Properties
+ `serviceGroupId`: 1 (number, required) - Unique Id of the group.
+ `serviceGroupName`: Insurance 1 (string, required) - Name of options group, will be used for display.
+ `serviceGroupDescription`: `This is the description of the service group, which may, actually, be much longer than this` (string, optional, nullable) - Description of the group, to display to customers.
+ `serviceGroupOptions`: (array[ServiceResponseItem], required) - A set of mutually exclusive options of (roughly) the same meaning, this group is made of.
+ `serviceGroupPriority`: 1 (number, optional, nullable) - Priority of the group as a whole, used for ordering of offers. Lower number means higher priority. Groups with same priority can be ordered at will (as long as they are ordered before/after any groups with lower/higher priority. If no priority is provided, may be ordered at will (after higher priority groups).
+ `serviceGroupExcludes`: [2, 3] (array[number], optional, nullable) - Ids of groups this group is mutually exclusive with. Customer cannot select items from this group and **excludes** group.
+ `serviceGroupProducts`: [1, 2] (array[number], optional, nullable) - The ID of product this service offer applies to. Most of the time, this will contain only one product.
+ `serviceGroupAdditionalInfo`: (array[AdditionalInfo], optional, nullable) - Additional Info for the ServiceGroup