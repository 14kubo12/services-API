FORMAT: 1A
HOST: http://mia.apiblueprint.org/

# MallPay Insurance Application API

## About

This API description is a work in progress. API is not stabilized yet and may change without notice.

## General Info

Here comes the general info about this RESTfull API.
The API is versioned - the purpose is to enable API development without breaking older versions in use. The version is part of the endpoint URL (ie `/v1/`).

### What's the purpose of this API

This API allows partners to retrieve info about services available for eligible products and operations required to set-up such services for their customers.

### General workflow

1. Log in.
2. Request services available for products specified.
3. Create a contract based on above offer of services.
4. Provide required information for the contract.
5. Activate the contract.
6. Cancel the contract.
7. Contract status information.

## API Endpoints Description

### Authorize

Enables the partner to log in. It is required to be able to use all the other endpoints.

### Request Services

Lets the partner to request available services for products. In order to do so, the partner has to provide information about products they require services for. Endpoint response contains services (and their possible combinations) for the provided products.

### Create Contract

Based on an offer received from Request Services endpoint and their customer choices, enables a partner to create a contract for the services selected. If it was successfully created, response contains information about the created contract, errors explaining what went wrong otherwise.

### Update Contract

Allows a partner to update a previously created non-activated? contract. This may be needed to fill-in certain allowed, previously unknown data at the time of product packaging or shipping - product serial number, for example. Only some parts of the contract may be updated this way.
In case of success, response contains updated contract, errors otherwise.

### Activate Contract

In order for us to be able to fulfill any contract, the contract has to be activated first. This typically happens at the time of product shipping or delivery, depending on partner circumstances.

**NOTE:** Activate Contract also sends contract activation information to customers e-mail address.

### Cancel Contract

Subject to general terms and conditions, a contract can also be canceled. Response contains info if the contract was successfully canceled. If it was not, response contains information why it was not canceled.

**NOTE:** Cancel Contract also sends contract cancellation information message to customers e-mail address.

### Contract Status

Provides information about created contracts and their status. 


## Authorize [/v1/partner/authorize]

### Request Authorization [POST]
Log in to be able to use other endpoints.

+ Request (application/json; charset=utf-8)
    + Attributes (AuthorizationRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (AuthorizationResponse)


## Request Services [/v1/services]

### Request Available Services [GET]
Get info on services available for sent products.

+ Request (application/json; charset=utf-8)
    + Attributes (RequestServicesRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (RequestServicesResponse)


## Create Contract [/v1/contracts]

### Create Contract [POST]
Create a contract based on available services offering.

+ Request (application/json; charset=utf-8)
    + Attributes (ContractCreateRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractCreateResponse)


## Contract Operations [/v1/contracts/{contract_id}]

### Contract Status [GET]
Get status of selected Contract.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractStatusResponse)

### Update Contract Full [PUT]
Update selected contract.

+ Request (application/json; charset=utf-8)
    + Attributes (ContractUpdateRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractUpdateResponse)


### Update Contract Partial [PATCH]
Update selected contract.

+ Request (application/json; charset=utf-8)
    + Attributes (ContractUpdateRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractUpdateResponse)


### Add Contract Item [POST]
Update selected contract item

+ Request (application/json; charset=utf-8)
    + Attributes (ContractItemAddRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractUpdateResponse)


## Contract Item Operations [/v1/contracts/{contract_id}/item/{item_id}]

### Get Contract Item [GET]
Get selected item from contract
+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractResponseItem)


### Update Contract Item [PUT]
Update selected contract item

+ Request (application/json; charset=utf-8)
    + Attributes (ContractItemUpdateRequest)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractUpdateResponse)

### Delete Contract Item [DELETE]
Update selected contract item

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractUpdateResponse)


## Activate Contract [/v1/contracts/{contract_id}/activate]

### Activate Contract [PUT]
Activate selected contract.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractActivateResponse)


## Cancel Contract [/v1/contracts/{contract_id}/cancel]

### Cancel Contract [PUT]
Cancel selected contract.

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (ContractCancelResponse)



# Data Structures

## AuthorizationRequest (object)
### Properties
+ `username`: `eShopUsername` (string, required) - Partner username
+ `password`: `eShopPassword` (string, required) - Partner password

## AuthorizationResponse (object)
### Properties
+ `accessToken`: `secretaccessToken` (string, required) - Secret access token
+ `expiresIn`: 7200 (number, required) - Remaining token validity time (in seconds)


## RequestServicesRequest (object)
Customer consent for processing of personal data according to GDPR. `slug` uniquely defines scope of the consent and purpose of processing, `businessDate` is the datetime customer agreed to the processing of this particular piece of personal data for the purpose defined by `slug`.
### Properties
+ `items` (array[ServiceRequestProduct], required) - Array of products you want to receive possible services for.

## RequestServicesResponse (object)
### Properties
+ `offersId`: `UUID-comes-here` (string, required) - Id of the offers
+ `offers` (array[ServiceResponseGroup], required)



## ContractCreateRequest (CreateContract)
Request for creating contract.
### Properties

## ContractCreateResponse (ResponseContract)
Returns created `Contract`, errors otherwise.
### Properties



## ContractStatusRequest (object)
### Properties

## ContractStatusResponse (ResponseContract)
### Properties


## ContractUpdateRequest (UpdateContract)
Update selected `Contract`. Only allows updating certain contract properties. in case you need to update other properties, which this method does not allow to change, you should request a new services offert and create a new contract.
### Properties

## ContractUpdateResponse (ResponseContract)
### Properties


## ContractItemAddRequest (ContractRequestItem)
### Properties


## ContractItemUpdateRequest (ContractRequestItem)
### Properties


## ContractActivateRequest (object)
The contract has to be activated for us to be able to fullfill it.
### Properties

## ContractActivateResponse (ResponseContract)
### Properties


## ContractCancelRequest (object)
A running `contract` can also be canceled under certain conditions (ie. in 14 days after goods delivery to customer).
### Properties

## ContractCancelResponse (ResponseContract)
The response is a `contract` as represented in our system or errors, if somethong went wrong.
### Properties


## PriceAmount (object)
### Properties
+ `priceIncVat`: 750000 (number) - Price including two decimal numbers (750000 = 7500,-).
+ `currency`: CZK (string, required) - Currenecy is required in absolute value prices.


## ServiceRequestProduct (object)
### Properties
+ `productName`: Nikon F (string, optional, nullable) - Product name
+ One Of
    + `productEan`: 1123456789123 (number, optional, nullable) - GTIN (EAN13), 13 or 14 digits length
    + `productCode`: NIKON-F-BLACK-1964 (string, optional, nullable) - Is this required at all?
+ One Of
    + `productCategoryText`: Camera, Still Picture, Analog, 35mm (string, required) -<!-- Do we require textual category or category code?-->
    + `productCategoryCode`: 1944 (number, required) -<!-- Do we require textual category or category code? -->
<!-- We have to decide here if we want textual or code-based categories. Which one is more advanageous? -->    
+ `productQuantity`: 2 (number, required)
+ `productPricePerPiece` (PriceAmount, required) -<!-- Price (and not from-to price) is required, since price interval may lead to getting either lower or higher service and service computation may depend on it. Also, it might be necessary for fullfillment - how would you pay for a product if you didn't know it's price? -->
+ `productCondition`: `new` (enum, required)
    + `new` - new product
    + `used` - used product
    + `unpacked` - like new product, possibly returned by customer in 14 day period after purchase
    + `other`


## ServicePrice (object)
Price of service including pricing type
### Properties
+ `servicePriceType`: `absolute` (enum, required) - Type of offer price
    + `absolute` -  Price of offer is absolute
    + `percent` - Price of offer is constructed as a fraction of `Price` of product this service is covering.
+ `servicePriceAmount`: 1250 (PriceAmount, required) - Price of this particular service offer


## ServiceResponseItem (object)
### Properties
+ `serviceId`: 1 (number, required) - Unique Id of the service
+ `serviceName`: `ADP (Accidental Damage Protection) Insurance` (string, required)
+ `serviceDescription`: `Description of the service, may be quite long` (string, optional, nullable) - Description of a service offering item in the group.
+ `servicePriority`: 1 (number, optional, nullable) - Offer ordering information, lower number means higher priority.
+ `servicePrice` (ServicePrice, required) - Price of service including type of price
+ `serviceStandalone`: true (boolean, required) - Is the service available stand-alone or only as a part of service package?


## ServiceResponseGroup (object)
### Properties
+ `serviceGroupId`: 1 (number, required) - Unique Id of the group.
+ `serviceGroupName`: Insurance 1 (string, required) - Name of options group, will be used for display.
+ `serviceGroupDescription`: `This is the description of the service group, which may, actually, be much longer than this` (string, optional, nullable) - Description of the group, to display to customers.
+ `serviceGroupOptions` (array[ServiceResponseItem], required) - A set of mutually exclusive options of (roughly) the same meaning, this group is made of.
+ `serviceGroupPriority`: 1 (number, optional, nullable) - Priority of the group as a whole, used for ordering of offers. Lower number means higher priority. Groups with same priority can be ordered at will (as long as they are ordered before/after any groups with lower/higher priority. If no priority is provided, may be ordered at will (after higher priority groups).
+ `serviceGroupExcludes`: [2, 3] (array[number], optional, nullable) - Ids of groups this group is mutually exclusive with. Customer cannot select offers from this group and **excludes** group at the same time.
+ `serviceGroupProducts`: [1, 2] (array[number], optional, nullable) - The ID of product this service offer applies to. Most of the time, this will contain only one product.


## SimpleContract (object)
### Properties
+ `contractCustomer` (ContractCustomer, required) - Destionation customer of the services
<!-- Should the activation be per contract and per service? I would definitelly make it per service, enablest services with different lengths. the question is the contract...) -->

## BaseContract (SimpleContract)
### Properties
+ `contractActivation`: `2018-05-05 18:34.0002T+2` (string, optional, nullable) - Datetime of contract activation
+ `contractCancellation`: `2018-12-31 05:11.1234T+1` (string, optional, nullable) - Datetime of contract cancellation
<!-- Should the activation be per contract and per service? I would definitelly make it per service, enablest services with different lengths. the question is the contract...) -->

## ResponseContract (BaseContract)
This is a contract object that the API returns in resonse to most requests.
### Properties
+ `contractId`: kasjfkjůladsfkj-adf-12 (string, required) - Contract ID
+ `contractItems` (array[ContractResponseItem], required) - Subject of the contract

## CreateContract (SimpleContract)
This is a contract object that the API returns in resonse to most requests.
### Properties
+ `contractItems` (array[ContractRequestItem], required) - Subject of the contract

## UpdateContract (SimpleContract)
This is a contract object that the API returns in resonse to most requests.
### Properties
+ `contractItems` (array[ContractRequestItem], required) - Subject of the contract


## ContractRequestItem
### Properties
+ `itemName`: `Nikon F` (string, required) - Name of item
+ One Of
    + `itemCode`: `fasd-fasd` (string, required)
    + `itemEAN`: 1234567891234 (number, required)
<!-- Do we want to allow both? What will be required to identify the product? -->
+ `itemSerialNumber`: `COM-456-456` (string, required)
<!-- Should serial numbers be compulsory? What should be done in case of products, that don't have SN? -->
+ `contractItemServices` (array[ContractItemService], required) - An array of Contract services for the item


## ContractResponseItem (ContractRequestItem)
### Properties
+ `itemId`: `235AF` (string, required) - ID of item in contract


## ContractItemService
### Properties
+ `offerId`: `UUID-comes-here` (string, required) - Id of the original offer the contract is based upon. Enables creating one contract
+ `serviceId`: 1 (number, required) - Id of the service option
+ `serviceGroupId`: 1 (number, required) - Id of the service group
+ `servicePrice` (ServicePrice, required) - service price including type
+ `serviceDescription`: `this is a shor description of the service` (string, optional, nullable) - Human readable description of the service
<!-- Should the description be contained here? I guess so, will make the reading of the contract much easier -->
+ `serviceActivatedDate`: `2018-08-03 13:22:5000T+2` (string, nullable) - datetime of service option activation
+ `serviceCancelledDate`: `2017-08-03 13:22:5000T+2` (string, nullable) - datetime of service cancellation
+ `serviceActiveUntilDate`: `2020-08-03 13:22:5000T+2` (string, nullable) - datetime of service expiration (when the service is no longer valid)
<!-- Should the services be activatable/cancellable individually? -->


## ContractCustomerPerson
### Properties
+ `firstName`: `Lukáš` (string, required) - Customer first name
+ `familyName`: `Říha` (string, required) - Customer family name


## ContractCustomerCompany
### Properties
+ `companyName`: `Usertech Digital s.r.o.` (string, required) - Company name
+ `companyICO`: 12345678 (number, required) - Company ICO, 8 digits


## Address
### Properties
+ One Of
    + properties
        + `streetName`: `Rohatého` (string, required)
        + `streetNumber`: `666/32` (string, required)
    + `streetAndNumber`: `Rohatého 666/32` (string, required)
<!-- We have to decide if we want to allow both types of street format of just one of the above. Is it important in any way for the processing that will follow? -->
+ `city`: `Praha 5` (string, required) - Address city
+ `zip`: `15000` (string, required) - Address ZIP
+ `country`: `Czech Republic` (string, required) - Country
<!-- Shall we allow also another contries, apart from CS? -->


## ContractCustomer
### Properties
+ `contractCustomerPerson` (ContractCustomerPerson, required) - Usage of this element signifies private services purchase
+ `contractCustomerCompany` (ContractCustomerCompany, optional, nullable) - Usage of this element signifies a business services purchase
+ `contractCustomerAddress` (Address, required) - Customer contact address
<!-- Do we really need customer contract address or this can be handled via eshop? -->


## Error (object)
### Properties
+ code: `ERR_1000_SOME_ERROR_CODE` (string, required) - Unique internal error code
+ message: `Some error/validation message description` (string, required) - Human readable error description (non-localized)
<!-- + severity (enum, required)
    + ERROR - Critical error, execution cannot continue. This MUST be indicated also by appropriate HTTP status code
    + WARN - Non-critical error, execution can continue but further user interaction is advisable. This MIGHT be indicated also by appropriate HTTP status code
    + INFO - Information only, execution can continue without user interaction -->
+ attribute: `personalBirthNumber` (string, optional) - JSON path of request attribute that caused the error (if applicable)
<!-- + ticketId: `UAT1:AMS:20160516-091658.450:45e4` (string, optional) - Internal ticket ID, used for error backtracking -->

## Errors (object)
### Properties
+ errors (array[Error], fixed-type, required) - Array with errors